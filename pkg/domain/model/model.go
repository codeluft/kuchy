// This file is generated by sqlingo (https://github.com/lqs/sqlingo)
// DO NOT EDIT.

package kuchy_dsl

import "github.com/lqs/sqlingo"

type sqlingoRuntimeAndGeneratorVersionsShouldBeTheSame uint32

const _ = sqlingoRuntimeAndGeneratorVersionsShouldBeTheSame(sqlingo.SqlingoRuntimeVersion - 2)
const _ = sqlingoRuntimeAndGeneratorVersionsShouldBeTheSame(2 - sqlingo.SqlingoRuntimeVersion)

type table interface {
	sqlingo.Table
}

type numberField interface {
	sqlingo.NumberField
}

type stringField interface {
	sqlingo.StringField
}

type booleanField interface {
	sqlingo.BooleanField
}

type arrayField interface {
	sqlingo.ArrayField
}

type tGooseDbVersion struct {
	table

	Id        integer_GooseDbVersion_Id
	VersionId bigint_GooseDbVersion_VersionId
	IsApplied boolean_GooseDbVersion_IsApplied
	Tstamp    timestamp_without_time_zone_GooseDbVersion_Tstamp
}

type integer_GooseDbVersion_Id struct{ numberField }
type bigint_GooseDbVersion_VersionId struct{ numberField }
type boolean_GooseDbVersion_IsApplied struct{ stringField }
type timestamp_without_time_zone_GooseDbVersion_Tstamp struct{ stringField }

var oGooseDbVersion = sqlingo.NewTable("goose_db_version")
var GooseDbVersion = tGooseDbVersion{
	table: oGooseDbVersion,

	Id:        integer_GooseDbVersion_Id{sqlingo.NewNumberField(oGooseDbVersion, "id")},
	VersionId: bigint_GooseDbVersion_VersionId{sqlingo.NewNumberField(oGooseDbVersion, "version_id")},
	IsApplied: boolean_GooseDbVersion_IsApplied{sqlingo.NewStringField(oGooseDbVersion, "is_applied")},
	Tstamp:    timestamp_without_time_zone_GooseDbVersion_Tstamp{sqlingo.NewStringField(oGooseDbVersion, "tstamp")},
}

func (t tGooseDbVersion) GetFields() []sqlingo.Field {
	return []sqlingo.Field{t.Id, t.VersionId, t.IsApplied, t.Tstamp}
}

func (t tGooseDbVersion) GetFieldByName(name string) sqlingo.Field {
	switch name {
	case "id":
		return t.Id
	case "version_id":
		return t.VersionId
	case "is_applied":
		return t.IsApplied
	case "tstamp":
		return t.Tstamp
	default:
		return nil
	}
}

func (t tGooseDbVersion) GetFieldsSQL() string {
	return "\"id\", \"version_id\", \"is_applied\", \"tstamp\""
}

func (t tGooseDbVersion) GetFullFieldsSQL() string {
	return "\"goose_db_version\".\"id\", \"goose_db_version\".\"version_id\", \"goose_db_version\".\"is_applied\", \"goose_db_version\".\"tstamp\""
}

type GooseDbVersionModel struct {
	Id        int64
	VersionId int64
	IsApplied string
	Tstamp    *string
}

func (m GooseDbVersionModel) GetTable() sqlingo.Table {
	return GooseDbVersion
}

func (m GooseDbVersionModel) GetValues() []interface{} {
	return []interface{}{m.Id, m.VersionId, m.IsApplied, m.Tstamp}
}

type tMeasurementUnit struct {
	table

	Id                 integer_MeasurementUnit_Id
	Uuid               uuid_MeasurementUnit_Uuid
	ReferenceUnitId    integer_MeasurementUnit_ReferenceUnitId
	ReferenceUnitValue numeric_MeasurementUnit_ReferenceUnitValue
	Name               character_varying_MeasurementUnit_Name
	CreatedAt          timestamp_without_time_zone_MeasurementUnit_CreatedAt
	UpdatedAt          timestamp_without_time_zone_MeasurementUnit_UpdatedAt
	DeletedAt          timestamp_without_time_zone_MeasurementUnit_DeletedAt
}

type integer_MeasurementUnit_Id struct{ numberField }
type uuid_MeasurementUnit_Uuid struct{ stringField }
type integer_MeasurementUnit_ReferenceUnitId struct{ numberField }
type numeric_MeasurementUnit_ReferenceUnitValue struct{ stringField }
type character_varying_MeasurementUnit_Name struct{ stringField }
type timestamp_without_time_zone_MeasurementUnit_CreatedAt struct{ stringField }
type timestamp_without_time_zone_MeasurementUnit_UpdatedAt struct{ stringField }
type timestamp_without_time_zone_MeasurementUnit_DeletedAt struct{ stringField }

var oMeasurementUnit = sqlingo.NewTable("measurement_unit")
var MeasurementUnit = tMeasurementUnit{
	table: oMeasurementUnit,

	Id:                 integer_MeasurementUnit_Id{sqlingo.NewNumberField(oMeasurementUnit, "id")},
	Uuid:               uuid_MeasurementUnit_Uuid{sqlingo.NewStringField(oMeasurementUnit, "uuid")},
	ReferenceUnitId:    integer_MeasurementUnit_ReferenceUnitId{sqlingo.NewNumberField(oMeasurementUnit, "reference_unit_id")},
	ReferenceUnitValue: numeric_MeasurementUnit_ReferenceUnitValue{sqlingo.NewStringField(oMeasurementUnit, "reference_unit_value")},
	Name:               character_varying_MeasurementUnit_Name{sqlingo.NewStringField(oMeasurementUnit, "name")},
	CreatedAt:          timestamp_without_time_zone_MeasurementUnit_CreatedAt{sqlingo.NewStringField(oMeasurementUnit, "created_at")},
	UpdatedAt:          timestamp_without_time_zone_MeasurementUnit_UpdatedAt{sqlingo.NewStringField(oMeasurementUnit, "updated_at")},
	DeletedAt:          timestamp_without_time_zone_MeasurementUnit_DeletedAt{sqlingo.NewStringField(oMeasurementUnit, "deleted_at")},
}

func (t tMeasurementUnit) GetFields() []sqlingo.Field {
	return []sqlingo.Field{t.Id, t.Uuid, t.ReferenceUnitId, t.ReferenceUnitValue, t.Name, t.CreatedAt, t.UpdatedAt, t.DeletedAt}
}

func (t tMeasurementUnit) GetFieldByName(name string) sqlingo.Field {
	switch name {
	case "id":
		return t.Id
	case "uuid":
		return t.Uuid
	case "reference_unit_id":
		return t.ReferenceUnitId
	case "reference_unit_value":
		return t.ReferenceUnitValue
	case "name":
		return t.Name
	case "created_at":
		return t.CreatedAt
	case "updated_at":
		return t.UpdatedAt
	case "deleted_at":
		return t.DeletedAt
	default:
		return nil
	}
}

func (t tMeasurementUnit) GetFieldsSQL() string {
	return "\"id\", \"uuid\", \"reference_unit_id\", \"reference_unit_value\", \"name\", \"created_at\", \"updated_at\", \"deleted_at\""
}

func (t tMeasurementUnit) GetFullFieldsSQL() string {
	return "\"measurement_unit\".\"id\", \"measurement_unit\".\"uuid\", \"measurement_unit\".\"reference_unit_id\", \"measurement_unit\".\"reference_unit_value\", \"measurement_unit\".\"name\", \"measurement_unit\".\"created_at\", \"measurement_unit\".\"updated_at\", \"measurement_unit\".\"deleted_at\""
}

type MeasurementUnitModel struct {
	Id                 int64
	Uuid               string
	ReferenceUnitId    *int64
	ReferenceUnitValue *string
	Name               string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          *string
}

func (m MeasurementUnitModel) GetTable() sqlingo.Table {
	return MeasurementUnit
}

func (m MeasurementUnitModel) GetValues() []interface{} {
	return []interface{}{m.Id, m.Uuid, m.ReferenceUnitId, m.ReferenceUnitValue, m.Name, m.CreatedAt, m.UpdatedAt, m.DeletedAt}
}

type tProduct struct {
	table

	Id                integer_Product_Id
	Uuid              uuid_Product_Uuid
	MeasurementUnitId integer_Product_MeasurementUnitId
	Name              character_varying_Product_Name
	Barcode           character_varying_Product_Barcode
	MeasurementValue  numeric_Product_MeasurementValue
	CreatedAt         timestamp_without_time_zone_Product_CreatedAt
	UpdatedAt         timestamp_without_time_zone_Product_UpdatedAt
	DeletedAt         timestamp_without_time_zone_Product_DeletedAt
}

type integer_Product_Id struct{ numberField }
type uuid_Product_Uuid struct{ stringField }
type integer_Product_MeasurementUnitId struct{ numberField }
type character_varying_Product_Name struct{ stringField }
type character_varying_Product_Barcode struct{ stringField }
type numeric_Product_MeasurementValue struct{ stringField }
type timestamp_without_time_zone_Product_CreatedAt struct{ stringField }
type timestamp_without_time_zone_Product_UpdatedAt struct{ stringField }
type timestamp_without_time_zone_Product_DeletedAt struct{ stringField }

var oProduct = sqlingo.NewTable("product")
var Product = tProduct{
	table: oProduct,

	Id:                integer_Product_Id{sqlingo.NewNumberField(oProduct, "id")},
	Uuid:              uuid_Product_Uuid{sqlingo.NewStringField(oProduct, "uuid")},
	MeasurementUnitId: integer_Product_MeasurementUnitId{sqlingo.NewNumberField(oProduct, "measurement_unit_id")},
	Name:              character_varying_Product_Name{sqlingo.NewStringField(oProduct, "name")},
	Barcode:           character_varying_Product_Barcode{sqlingo.NewStringField(oProduct, "barcode")},
	MeasurementValue:  numeric_Product_MeasurementValue{sqlingo.NewStringField(oProduct, "measurement_value")},
	CreatedAt:         timestamp_without_time_zone_Product_CreatedAt{sqlingo.NewStringField(oProduct, "created_at")},
	UpdatedAt:         timestamp_without_time_zone_Product_UpdatedAt{sqlingo.NewStringField(oProduct, "updated_at")},
	DeletedAt:         timestamp_without_time_zone_Product_DeletedAt{sqlingo.NewStringField(oProduct, "deleted_at")},
}

func (t tProduct) GetFields() []sqlingo.Field {
	return []sqlingo.Field{t.Id, t.Uuid, t.MeasurementUnitId, t.Name, t.Barcode, t.MeasurementValue, t.CreatedAt, t.UpdatedAt, t.DeletedAt}
}

func (t tProduct) GetFieldByName(name string) sqlingo.Field {
	switch name {
	case "id":
		return t.Id
	case "uuid":
		return t.Uuid
	case "measurement_unit_id":
		return t.MeasurementUnitId
	case "name":
		return t.Name
	case "barcode":
		return t.Barcode
	case "measurement_value":
		return t.MeasurementValue
	case "created_at":
		return t.CreatedAt
	case "updated_at":
		return t.UpdatedAt
	case "deleted_at":
		return t.DeletedAt
	default:
		return nil
	}
}

func (t tProduct) GetFieldsSQL() string {
	return "\"id\", \"uuid\", \"measurement_unit_id\", \"name\", \"barcode\", \"measurement_value\", \"created_at\", \"updated_at\", \"deleted_at\""
}

func (t tProduct) GetFullFieldsSQL() string {
	return "\"product\".\"id\", \"product\".\"uuid\", \"product\".\"measurement_unit_id\", \"product\".\"name\", \"product\".\"barcode\", \"product\".\"measurement_value\", \"product\".\"created_at\", \"product\".\"updated_at\", \"product\".\"deleted_at\""
}

type ProductModel struct {
	Id                int64
	Uuid              string
	MeasurementUnitId int64
	Name              string
	Barcode           string
	MeasurementValue  string
	CreatedAt         string
	UpdatedAt         string
	DeletedAt         *string
}

func (m ProductModel) GetTable() sqlingo.Table {
	return Product
}

func (m ProductModel) GetValues() []interface{} {
	return []interface{}{m.Id, m.Uuid, m.MeasurementUnitId, m.Name, m.Barcode, m.MeasurementValue, m.CreatedAt, m.UpdatedAt, m.DeletedAt}
}

type tRecipe struct {
	table

	Id        integer_Recipe_Id
	Uuid      uuid_Recipe_Uuid
	Name      character_varying_Recipe_Name
	CreatedAt timestamp_without_time_zone_Recipe_CreatedAt
	UpdatedAt timestamp_without_time_zone_Recipe_UpdatedAt
	DeletedAt timestamp_without_time_zone_Recipe_DeletedAt
}

type integer_Recipe_Id struct{ numberField }
type uuid_Recipe_Uuid struct{ stringField }
type character_varying_Recipe_Name struct{ stringField }
type timestamp_without_time_zone_Recipe_CreatedAt struct{ stringField }
type timestamp_without_time_zone_Recipe_UpdatedAt struct{ stringField }
type timestamp_without_time_zone_Recipe_DeletedAt struct{ stringField }

var oRecipe = sqlingo.NewTable("recipe")
var Recipe = tRecipe{
	table: oRecipe,

	Id:        integer_Recipe_Id{sqlingo.NewNumberField(oRecipe, "id")},
	Uuid:      uuid_Recipe_Uuid{sqlingo.NewStringField(oRecipe, "uuid")},
	Name:      character_varying_Recipe_Name{sqlingo.NewStringField(oRecipe, "name")},
	CreatedAt: timestamp_without_time_zone_Recipe_CreatedAt{sqlingo.NewStringField(oRecipe, "created_at")},
	UpdatedAt: timestamp_without_time_zone_Recipe_UpdatedAt{sqlingo.NewStringField(oRecipe, "updated_at")},
	DeletedAt: timestamp_without_time_zone_Recipe_DeletedAt{sqlingo.NewStringField(oRecipe, "deleted_at")},
}

func (t tRecipe) GetFields() []sqlingo.Field {
	return []sqlingo.Field{t.Id, t.Uuid, t.Name, t.CreatedAt, t.UpdatedAt, t.DeletedAt}
}

func (t tRecipe) GetFieldByName(name string) sqlingo.Field {
	switch name {
	case "id":
		return t.Id
	case "uuid":
		return t.Uuid
	case "name":
		return t.Name
	case "created_at":
		return t.CreatedAt
	case "updated_at":
		return t.UpdatedAt
	case "deleted_at":
		return t.DeletedAt
	default:
		return nil
	}
}

func (t tRecipe) GetFieldsSQL() string {
	return "\"id\", \"uuid\", \"name\", \"created_at\", \"updated_at\", \"deleted_at\""
}

func (t tRecipe) GetFullFieldsSQL() string {
	return "\"recipe\".\"id\", \"recipe\".\"uuid\", \"recipe\".\"name\", \"recipe\".\"created_at\", \"recipe\".\"updated_at\", \"recipe\".\"deleted_at\""
}

type RecipeModel struct {
	Id        int64
	Uuid      string
	Name      string
	CreatedAt string
	UpdatedAt string
	DeletedAt *string
}

func (m RecipeModel) GetTable() sqlingo.Table {
	return Recipe
}

func (m RecipeModel) GetValues() []interface{} {
	return []interface{}{m.Id, m.Uuid, m.Name, m.CreatedAt, m.UpdatedAt, m.DeletedAt}
}

type tRecipeProduct struct {
	table

	Id        integer_RecipeProduct_Id
	RecipeId  integer_RecipeProduct_RecipeId
	ProductId integer_RecipeProduct_ProductId
	Quantity  numeric_RecipeProduct_Quantity
	CreatedAt timestamp_without_time_zone_RecipeProduct_CreatedAt
	UpdatedAt timestamp_without_time_zone_RecipeProduct_UpdatedAt
	DeletedAt timestamp_without_time_zone_RecipeProduct_DeletedAt
}

type integer_RecipeProduct_Id struct{ numberField }
type integer_RecipeProduct_RecipeId struct{ numberField }
type integer_RecipeProduct_ProductId struct{ numberField }
type numeric_RecipeProduct_Quantity struct{ stringField }
type timestamp_without_time_zone_RecipeProduct_CreatedAt struct{ stringField }
type timestamp_without_time_zone_RecipeProduct_UpdatedAt struct{ stringField }
type timestamp_without_time_zone_RecipeProduct_DeletedAt struct{ stringField }

var oRecipeProduct = sqlingo.NewTable("recipe_product")
var RecipeProduct = tRecipeProduct{
	table: oRecipeProduct,

	Id:        integer_RecipeProduct_Id{sqlingo.NewNumberField(oRecipeProduct, "id")},
	RecipeId:  integer_RecipeProduct_RecipeId{sqlingo.NewNumberField(oRecipeProduct, "recipe_id")},
	ProductId: integer_RecipeProduct_ProductId{sqlingo.NewNumberField(oRecipeProduct, "product_id")},
	Quantity:  numeric_RecipeProduct_Quantity{sqlingo.NewStringField(oRecipeProduct, "quantity")},
	CreatedAt: timestamp_without_time_zone_RecipeProduct_CreatedAt{sqlingo.NewStringField(oRecipeProduct, "created_at")},
	UpdatedAt: timestamp_without_time_zone_RecipeProduct_UpdatedAt{sqlingo.NewStringField(oRecipeProduct, "updated_at")},
	DeletedAt: timestamp_without_time_zone_RecipeProduct_DeletedAt{sqlingo.NewStringField(oRecipeProduct, "deleted_at")},
}

func (t tRecipeProduct) GetFields() []sqlingo.Field {
	return []sqlingo.Field{t.Id, t.RecipeId, t.ProductId, t.Quantity, t.CreatedAt, t.UpdatedAt, t.DeletedAt}
}

func (t tRecipeProduct) GetFieldByName(name string) sqlingo.Field {
	switch name {
	case "id":
		return t.Id
	case "recipe_id":
		return t.RecipeId
	case "product_id":
		return t.ProductId
	case "quantity":
		return t.Quantity
	case "created_at":
		return t.CreatedAt
	case "updated_at":
		return t.UpdatedAt
	case "deleted_at":
		return t.DeletedAt
	default:
		return nil
	}
}

func (t tRecipeProduct) GetFieldsSQL() string {
	return "\"id\", \"recipe_id\", \"product_id\", \"quantity\", \"created_at\", \"updated_at\", \"deleted_at\""
}

func (t tRecipeProduct) GetFullFieldsSQL() string {
	return "\"recipe_product\".\"id\", \"recipe_product\".\"recipe_id\", \"recipe_product\".\"product_id\", \"recipe_product\".\"quantity\", \"recipe_product\".\"created_at\", \"recipe_product\".\"updated_at\", \"recipe_product\".\"deleted_at\""
}

type RecipeProductModel struct {
	Id        int64
	RecipeId  int64
	ProductId int64
	Quantity  string
	CreatedAt string
	UpdatedAt string
	DeletedAt *string
}

func (m RecipeProductModel) GetTable() sqlingo.Table {
	return RecipeProduct
}

func (m RecipeProductModel) GetValues() []interface{} {
	return []interface{}{m.Id, m.RecipeId, m.ProductId, m.Quantity, m.CreatedAt, m.UpdatedAt, m.DeletedAt}
}

type tRecipeSellingHistory struct {
	table

	Id           integer_RecipeSellingHistory_Id
	RecipeId     integer_RecipeSellingHistory_RecipeId
	CostPrice    numeric_RecipeSellingHistory_CostPrice
	SellingPrice numeric_RecipeSellingHistory_SellingPrice
	CreatedAt    timestamp_without_time_zone_RecipeSellingHistory_CreatedAt
	UpdatedAt    timestamp_without_time_zone_RecipeSellingHistory_UpdatedAt
	DeletedAt    timestamp_without_time_zone_RecipeSellingHistory_DeletedAt
}

type integer_RecipeSellingHistory_Id struct{ numberField }
type integer_RecipeSellingHistory_RecipeId struct{ numberField }
type numeric_RecipeSellingHistory_CostPrice struct{ stringField }
type numeric_RecipeSellingHistory_SellingPrice struct{ stringField }
type timestamp_without_time_zone_RecipeSellingHistory_CreatedAt struct{ stringField }
type timestamp_without_time_zone_RecipeSellingHistory_UpdatedAt struct{ stringField }
type timestamp_without_time_zone_RecipeSellingHistory_DeletedAt struct{ stringField }

var oRecipeSellingHistory = sqlingo.NewTable("recipe_selling_history")
var RecipeSellingHistory = tRecipeSellingHistory{
	table: oRecipeSellingHistory,

	Id:           integer_RecipeSellingHistory_Id{sqlingo.NewNumberField(oRecipeSellingHistory, "id")},
	RecipeId:     integer_RecipeSellingHistory_RecipeId{sqlingo.NewNumberField(oRecipeSellingHistory, "recipe_id")},
	CostPrice:    numeric_RecipeSellingHistory_CostPrice{sqlingo.NewStringField(oRecipeSellingHistory, "cost_price")},
	SellingPrice: numeric_RecipeSellingHistory_SellingPrice{sqlingo.NewStringField(oRecipeSellingHistory, "selling_price")},
	CreatedAt:    timestamp_without_time_zone_RecipeSellingHistory_CreatedAt{sqlingo.NewStringField(oRecipeSellingHistory, "created_at")},
	UpdatedAt:    timestamp_without_time_zone_RecipeSellingHistory_UpdatedAt{sqlingo.NewStringField(oRecipeSellingHistory, "updated_at")},
	DeletedAt:    timestamp_without_time_zone_RecipeSellingHistory_DeletedAt{sqlingo.NewStringField(oRecipeSellingHistory, "deleted_at")},
}

func (t tRecipeSellingHistory) GetFields() []sqlingo.Field {
	return []sqlingo.Field{t.Id, t.RecipeId, t.CostPrice, t.SellingPrice, t.CreatedAt, t.UpdatedAt, t.DeletedAt}
}

func (t tRecipeSellingHistory) GetFieldByName(name string) sqlingo.Field {
	switch name {
	case "id":
		return t.Id
	case "recipe_id":
		return t.RecipeId
	case "cost_price":
		return t.CostPrice
	case "selling_price":
		return t.SellingPrice
	case "created_at":
		return t.CreatedAt
	case "updated_at":
		return t.UpdatedAt
	case "deleted_at":
		return t.DeletedAt
	default:
		return nil
	}
}

func (t tRecipeSellingHistory) GetFieldsSQL() string {
	return "\"id\", \"recipe_id\", \"cost_price\", \"selling_price\", \"created_at\", \"updated_at\", \"deleted_at\""
}

func (t tRecipeSellingHistory) GetFullFieldsSQL() string {
	return "\"recipe_selling_history\".\"id\", \"recipe_selling_history\".\"recipe_id\", \"recipe_selling_history\".\"cost_price\", \"recipe_selling_history\".\"selling_price\", \"recipe_selling_history\".\"created_at\", \"recipe_selling_history\".\"updated_at\", \"recipe_selling_history\".\"deleted_at\""
}

type RecipeSellingHistoryModel struct {
	Id           int64
	RecipeId     int64
	CostPrice    string
	SellingPrice string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    *string
}

func (m RecipeSellingHistoryModel) GetTable() sqlingo.Table {
	return RecipeSellingHistory
}

func (m RecipeSellingHistoryModel) GetValues() []interface{} {
	return []interface{}{m.Id, m.RecipeId, m.CostPrice, m.SellingPrice, m.CreatedAt, m.UpdatedAt, m.DeletedAt}
}

type tStockOperation struct {
	table

	Id        integer_StockOperation_Id
	Uuid      uuid_StockOperation_Uuid
	Name      character_varying_StockOperation_Name
	CreatedAt timestamp_without_time_zone_StockOperation_CreatedAt
	UpdatedAt timestamp_without_time_zone_StockOperation_UpdatedAt
	DeletedAt timestamp_without_time_zone_StockOperation_DeletedAt
}

type integer_StockOperation_Id struct{ numberField }
type uuid_StockOperation_Uuid struct{ stringField }
type character_varying_StockOperation_Name struct{ stringField }
type timestamp_without_time_zone_StockOperation_CreatedAt struct{ stringField }
type timestamp_without_time_zone_StockOperation_UpdatedAt struct{ stringField }
type timestamp_without_time_zone_StockOperation_DeletedAt struct{ stringField }

var oStockOperation = sqlingo.NewTable("stock_operation")
var StockOperation = tStockOperation{
	table: oStockOperation,

	Id:        integer_StockOperation_Id{sqlingo.NewNumberField(oStockOperation, "id")},
	Uuid:      uuid_StockOperation_Uuid{sqlingo.NewStringField(oStockOperation, "uuid")},
	Name:      character_varying_StockOperation_Name{sqlingo.NewStringField(oStockOperation, "name")},
	CreatedAt: timestamp_without_time_zone_StockOperation_CreatedAt{sqlingo.NewStringField(oStockOperation, "created_at")},
	UpdatedAt: timestamp_without_time_zone_StockOperation_UpdatedAt{sqlingo.NewStringField(oStockOperation, "updated_at")},
	DeletedAt: timestamp_without_time_zone_StockOperation_DeletedAt{sqlingo.NewStringField(oStockOperation, "deleted_at")},
}

func (t tStockOperation) GetFields() []sqlingo.Field {
	return []sqlingo.Field{t.Id, t.Uuid, t.Name, t.CreatedAt, t.UpdatedAt, t.DeletedAt}
}

func (t tStockOperation) GetFieldByName(name string) sqlingo.Field {
	switch name {
	case "id":
		return t.Id
	case "uuid":
		return t.Uuid
	case "name":
		return t.Name
	case "created_at":
		return t.CreatedAt
	case "updated_at":
		return t.UpdatedAt
	case "deleted_at":
		return t.DeletedAt
	default:
		return nil
	}
}

func (t tStockOperation) GetFieldsSQL() string {
	return "\"id\", \"uuid\", \"name\", \"created_at\", \"updated_at\", \"deleted_at\""
}

func (t tStockOperation) GetFullFieldsSQL() string {
	return "\"stock_operation\".\"id\", \"stock_operation\".\"uuid\", \"stock_operation\".\"name\", \"stock_operation\".\"created_at\", \"stock_operation\".\"updated_at\", \"stock_operation\".\"deleted_at\""
}

type StockOperationModel struct {
	Id        int64
	Uuid      string
	Name      string
	CreatedAt string
	UpdatedAt string
	DeletedAt *string
}

func (m StockOperationModel) GetTable() sqlingo.Table {
	return StockOperation
}

func (m StockOperationModel) GetValues() []interface{} {
	return []interface{}{m.Id, m.Uuid, m.Name, m.CreatedAt, m.UpdatedAt, m.DeletedAt}
}

type tStockHistory struct {
	table

	Id               integer_StockHistory_Id
	StockOperationId integer_StockHistory_StockOperationId
	ProductId        integer_StockHistory_ProductId
	Quantity         numeric_StockHistory_Quantity
	CreatedAt        timestamp_without_time_zone_StockHistory_CreatedAt
	UpdatedAt        timestamp_without_time_zone_StockHistory_UpdatedAt
	DeletedAt        timestamp_without_time_zone_StockHistory_DeletedAt
}

type integer_StockHistory_Id struct{ numberField }
type integer_StockHistory_StockOperationId struct{ numberField }
type integer_StockHistory_ProductId struct{ numberField }
type numeric_StockHistory_Quantity struct{ stringField }
type timestamp_without_time_zone_StockHistory_CreatedAt struct{ stringField }
type timestamp_without_time_zone_StockHistory_UpdatedAt struct{ stringField }
type timestamp_without_time_zone_StockHistory_DeletedAt struct{ stringField }

var oStockHistory = sqlingo.NewTable("stock_history")
var StockHistory = tStockHistory{
	table: oStockHistory,

	Id:               integer_StockHistory_Id{sqlingo.NewNumberField(oStockHistory, "id")},
	StockOperationId: integer_StockHistory_StockOperationId{sqlingo.NewNumberField(oStockHistory, "stock_operation_id")},
	ProductId:        integer_StockHistory_ProductId{sqlingo.NewNumberField(oStockHistory, "product_id")},
	Quantity:         numeric_StockHistory_Quantity{sqlingo.NewStringField(oStockHistory, "quantity")},
	CreatedAt:        timestamp_without_time_zone_StockHistory_CreatedAt{sqlingo.NewStringField(oStockHistory, "created_at")},
	UpdatedAt:        timestamp_without_time_zone_StockHistory_UpdatedAt{sqlingo.NewStringField(oStockHistory, "updated_at")},
	DeletedAt:        timestamp_without_time_zone_StockHistory_DeletedAt{sqlingo.NewStringField(oStockHistory, "deleted_at")},
}

func (t tStockHistory) GetFields() []sqlingo.Field {
	return []sqlingo.Field{t.Id, t.StockOperationId, t.ProductId, t.Quantity, t.CreatedAt, t.UpdatedAt, t.DeletedAt}
}

func (t tStockHistory) GetFieldByName(name string) sqlingo.Field {
	switch name {
	case "id":
		return t.Id
	case "stock_operation_id":
		return t.StockOperationId
	case "product_id":
		return t.ProductId
	case "quantity":
		return t.Quantity
	case "created_at":
		return t.CreatedAt
	case "updated_at":
		return t.UpdatedAt
	case "deleted_at":
		return t.DeletedAt
	default:
		return nil
	}
}

func (t tStockHistory) GetFieldsSQL() string {
	return "\"id\", \"stock_operation_id\", \"product_id\", \"quantity\", \"created_at\", \"updated_at\", \"deleted_at\""
}

func (t tStockHistory) GetFullFieldsSQL() string {
	return "\"stock_history\".\"id\", \"stock_history\".\"stock_operation_id\", \"stock_history\".\"product_id\", \"stock_history\".\"quantity\", \"stock_history\".\"created_at\", \"stock_history\".\"updated_at\", \"stock_history\".\"deleted_at\""
}

type StockHistoryModel struct {
	Id               int64
	StockOperationId int64
	ProductId        int64
	Quantity         string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        *string
}

func (m StockHistoryModel) GetTable() sqlingo.Table {
	return StockHistory
}

func (m StockHistoryModel) GetValues() []interface{} {
	return []interface{}{m.Id, m.StockOperationId, m.ProductId, m.Quantity, m.CreatedAt, m.UpdatedAt, m.DeletedAt}
}

type tChangelog struct {
	table

	Id               integer_Changelog_Id
	Uuid             uuid_Changelog_Uuid
	ObjectName       character_varying_Changelog_ObjectName
	ObjectId         integer_Changelog_ObjectId
	ParentObjectName character_varying_Changelog_ParentObjectName
	ParentObjectId   integer_Changelog_ParentObjectId
	Operation        character_varying_Changelog_Operation
	FieldName        character_varying_Changelog_FieldName
	OldValue         character_varying_Changelog_OldValue
	NewValue         character_varying_Changelog_NewValue
	CreatedAt        timestamp_without_time_zone_Changelog_CreatedAt
}

type integer_Changelog_Id struct{ numberField }
type uuid_Changelog_Uuid struct{ stringField }
type character_varying_Changelog_ObjectName struct{ stringField }
type integer_Changelog_ObjectId struct{ numberField }
type character_varying_Changelog_ParentObjectName struct{ stringField }
type integer_Changelog_ParentObjectId struct{ numberField }
type character_varying_Changelog_Operation struct{ stringField }
type character_varying_Changelog_FieldName struct{ stringField }
type character_varying_Changelog_OldValue struct{ stringField }
type character_varying_Changelog_NewValue struct{ stringField }
type timestamp_without_time_zone_Changelog_CreatedAt struct{ stringField }

var oChangelog = sqlingo.NewTable("changelog")
var Changelog = tChangelog{
	table: oChangelog,

	Id:               integer_Changelog_Id{sqlingo.NewNumberField(oChangelog, "id")},
	Uuid:             uuid_Changelog_Uuid{sqlingo.NewStringField(oChangelog, "uuid")},
	ObjectName:       character_varying_Changelog_ObjectName{sqlingo.NewStringField(oChangelog, "object_name")},
	ObjectId:         integer_Changelog_ObjectId{sqlingo.NewNumberField(oChangelog, "object_id")},
	ParentObjectName: character_varying_Changelog_ParentObjectName{sqlingo.NewStringField(oChangelog, "parent_object_name")},
	ParentObjectId:   integer_Changelog_ParentObjectId{sqlingo.NewNumberField(oChangelog, "parent_object_id")},
	Operation:        character_varying_Changelog_Operation{sqlingo.NewStringField(oChangelog, "operation")},
	FieldName:        character_varying_Changelog_FieldName{sqlingo.NewStringField(oChangelog, "field_name")},
	OldValue:         character_varying_Changelog_OldValue{sqlingo.NewStringField(oChangelog, "old_value")},
	NewValue:         character_varying_Changelog_NewValue{sqlingo.NewStringField(oChangelog, "new_value")},
	CreatedAt:        timestamp_without_time_zone_Changelog_CreatedAt{sqlingo.NewStringField(oChangelog, "created_at")},
}

func (t tChangelog) GetFields() []sqlingo.Field {
	return []sqlingo.Field{t.Id, t.Uuid, t.ObjectName, t.ObjectId, t.ParentObjectName, t.ParentObjectId, t.Operation, t.FieldName, t.OldValue, t.NewValue, t.CreatedAt}
}

func (t tChangelog) GetFieldByName(name string) sqlingo.Field {
	switch name {
	case "id":
		return t.Id
	case "uuid":
		return t.Uuid
	case "object_name":
		return t.ObjectName
	case "object_id":
		return t.ObjectId
	case "parent_object_name":
		return t.ParentObjectName
	case "parent_object_id":
		return t.ParentObjectId
	case "operation":
		return t.Operation
	case "field_name":
		return t.FieldName
	case "old_value":
		return t.OldValue
	case "new_value":
		return t.NewValue
	case "created_at":
		return t.CreatedAt
	default:
		return nil
	}
}

func (t tChangelog) GetFieldsSQL() string {
	return "\"id\", \"uuid\", \"object_name\", \"object_id\", \"parent_object_name\", \"parent_object_id\", \"operation\", \"field_name\", \"old_value\", \"new_value\", \"created_at\""
}

func (t tChangelog) GetFullFieldsSQL() string {
	return "\"changelog\".\"id\", \"changelog\".\"uuid\", \"changelog\".\"object_name\", \"changelog\".\"object_id\", \"changelog\".\"parent_object_name\", \"changelog\".\"parent_object_id\", \"changelog\".\"operation\", \"changelog\".\"field_name\", \"changelog\".\"old_value\", \"changelog\".\"new_value\", \"changelog\".\"created_at\""
}

type ChangelogModel struct {
	Id               int64
	Uuid             string
	ObjectName       string
	ObjectId         int64
	ParentObjectName *string
	ParentObjectId   *int64
	Operation        string
	FieldName        string
	OldValue         *string
	NewValue         *string
	CreatedAt        string
}

func (m ChangelogModel) GetTable() sqlingo.Table {
	return Changelog
}

func (m ChangelogModel) GetValues() []interface{} {
	return []interface{}{m.Id, m.Uuid, m.ObjectName, m.ObjectId, m.ParentObjectName, m.ParentObjectId, m.Operation, m.FieldName, m.OldValue, m.NewValue, m.CreatedAt}
}

func GetTable(name string) sqlingo.Table {
	switch name {
	case "goose_db_version":
		return GooseDbVersion
	case "measurement_unit":
		return MeasurementUnit
	case "product":
		return Product
	case "recipe":
		return Recipe
	case "recipe_product":
		return RecipeProduct
	case "recipe_selling_history":
		return RecipeSellingHistory
	case "stock_operation":
		return StockOperation
	case "stock_history":
		return StockHistory
	case "changelog":
		return Changelog
	default:
		return nil
	}
}

func GetTables() []sqlingo.Table {
	return []sqlingo.Table{
		GooseDbVersion,
		MeasurementUnit,
		Product,
		Recipe,
		RecipeProduct,
		RecipeSellingHistory,
		StockOperation,
		StockHistory,
		Changelog,
	}
}
